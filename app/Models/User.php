<?php

namespace App\Models;

use App\Notifications\ResetPasswordNotification;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Notifications\Notifiable;
use Illuminate\Support\Facades\DB;
use TCG\Voyager\Traits\Spatial;
use Tymon\JWTAuth\Contracts\JWTSubject;

class User extends \TCG\Voyager\Models\User implements JWTSubject
{
    use Spatial, HasFactory, Notifiable, SoftDeletes;

    /**
     * @var string[]
     */
    protected $spatial = ['latitude', 'longitude'];
    /**
     * @var string
     */
    static public $lengthOfRefCode = 10;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name',
        'email',
        'avatar',
        'email_verified_at',
        'password',
        'description',
        'balance',
        'currency_id',
        'latitude',
        'longitude',
        'phone',
        'is_full_registration',
        'blocked',
        'country',
        'region',
        'city',
        'country_id',
        'region_id',
        'city_id',
        'ref_code',
        'bonus_balance'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'phone_verified_at' => 'datetime',
    ];

    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    /**
     * @return BelongsToMany
     */
    public function images()
    {
        return $this->belongsToMany(Image::class, 'user_images')->using(UserImage::class)->withPivot('image_id');
    }

    public function getJWTCustomClaims()
    {
        return [];
    }

    public function delete()
    {

        if ($this->forceDeleting) {
            return Image::destroy($this->images->pluck('id'));
        }
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function chats()
    {
        return $this->hasMany(ChatUser::class, 'user_id');

    }

    public function unreadMessages()
    {
        return $this->hasMany(ChatMessageStatus::class, 'user_id')->where('is_read', false);

    }

    public function getLocation($column)
    {
        $model = self::select(DB::raw($column . ' AS ' . $column))
            ->where('id', $this->id)
            ->first();

        return isset($model) ? $model->$column : '';
    }

    public function getCoordinates()
    {
        $coords = [];

        if (!empty($this->spatial)) {
            $i = 0;
            foreach ($this->spatial as $column) {

                $clear = trim(preg_replace('/[a-zA-Z\(\)]/', '', $this->getLocation($column)));
                if ($i == 0) {
                    $coords[] = [
                        'lat' => $clear,
                    ];
                }
                if ($i == 1) {
                    $coords[0]['lng'] = $clear;
                }
                $i++;
            }
        }

        return $coords;
    }


    /**
     * @return BelongsToMany
     */
    public function contacts()
    {
        return $this->belongsToMany(ContactType::class, 'user_contact', 'user_id', 'contact_id')->where('status', true)->withPivot('values');
    }

    /**
     * @return BelongsToMany
     */
    public function social()
    {
        return $this->belongsToMany(SocialMediaType::class, 'user_social', 'user_id', 'social_id')->where('status', true)->withPivot('values');
    }

    /**
     * @param array $options
     * @return bool|mixed
     */
    public function saveQuietly(array $options = [])
    {
        return static::withoutEvents(function () use ($options) {
            return $this->save($options);
        });
    }

    /**
     * @return HasOne
     */
    public function company()
    {
        return $this->hasOne(Company::class, 'owner_id');
    }

    /**
     * @return BelongsToMany
     */
    public function referrals()
    {
        return $this->belongsToMany(User::class, 'user_referral', 'user_id', 'referral_id');
    }

    /**
     * Send a password reset notification to the user.
     *
     * @param  string  $token
     * @return void
     */
    public function sendPasswordResetNotification($token)
    {
        $url = env('FRONT_URL', 'https://advon.test.ut.in.ua').'/restore?token='.$token;

        $this->notify(new ResetPasswordNotification($url, $this->email));
    }



}
